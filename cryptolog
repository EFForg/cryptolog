#!/usr/bin/env python

from sys import stdin
from os import urandom
from time import localtime
from syslog import syslog, LOG_CRIT
from base64 import b64encode as encode
from hmac import HMAC as hash
from argparse import ArgumentParser
from subprocess import Popen, PIPE

salt_data = None
salt_day = None
salt_size = 16

def salt():
    t = localtime()
    now = (t.tm_year, t.tm_yday)
    if salt_day != now:
        salt_data = urandom(16)
        salt_day = now
    return salt_data

def hash_ip(ip):
    return encode(hash(salt(), ip).digest())[:6]

if __name__ == "__main__":
    parser = ArgumentParser(description='A program to encrypt the IP addresses in web server logs, to be used within an Apache CustomLog line. It assumes that the IP address is the first space-separated field in the log line. Input comes in the form of log lines from stdin.')
    parser.add_argument('-w',
            dest='write', 
            help='filename to write logs to')
    parser.add_argument('-c',
            dest='command', 
            help='pipe logs to this external program')
    args = parser.parse_args()

    try:
        log_file = None
        if(args.write != None):
            log_file = file(args.write, 'ab')

        p = None
        if(args.command != None):
            p = Popen(args.command, stdin=PIPE, shell=True)

        log = stdin.readline()
        while(log):
            ip, rest = log.split(" ", 1)
            crypted_log = " ".join((hash_ip(ip), rest))

            if(log_file != None):
                log_file.write(crypted_log)
                log_file.flush()

            if(p != None):
                p.stdin.write(crypted_log)
                p.stdin.flush()

            log = stdin.readline()

        if(log_file != None):
            log_file.close()

        if(p != None):
            p.stdin.close()
            p.wait()
    except Exception, e:
        syslog(LOG_CRIT, str(e))

